<?php

declare(strict_types=1);

namespace Garbuzivan\A3F\Parsers;

use Garbuzivan\A3F\Contracts\HtmlParserInterface;

/**
 * Парсеры могут быть разные, но правильно чтоб они реализовывали один интерфейс,
 * тогда гарантировано мы сможем взаимозаменять их, а в задачах использовать наиболее подходящий.
 * Конечно в реальной жизни мы должны проверять валидность данных и т.д.,
 * но для демонстрации мы просто проговорим это словами, чтоб не тратить время, представим что любая строка ВИЛИДНА
 */
class HtmlFirstParser implements HtmlParserInterface
{
    protected array $dom = [];

    /**
     * Метод загрузки данных по ссылке
     *
     * @return void
     */
    public function getDom(): object
    {
        // Можно конечно было реализовать $dom на основе вложенных моделей,
        // Но это демонстрация и мы просто сложим все в массив и преобразуем в обьект, но фантазируем что это модели)
        return (object)$this->dom;
    }

    /**
     * Метод для чтения строки для преобразования в DOM
     *
     * @param string $html
     *
     * @return void
     */
    public function read(string $html): void
    {
        $html = $this->clearCode($html);
        // Предположим, тут после очистки мы строим нужный объект (структуру) нашего документа,
        // чтоб в последующем работать с ней как нужно.
        // В силу того, что правильная реализация займет много времени, мы просто поясним, что есть теги,
        // содержимое тегов (оно может быть вложенное и иметь множество элементов), атрибуты тегов
        // мы сделаем совсем просто получим просто список имен тегов без вложенности, для экономии времени.
        // Обработок можно добавлять сколько угодно, включая приведение к единому регистру и т.д.
        preg_match_all('~<([a-zA-Z0-9]+)[\s>]~isuU', $html, $match);
        $this->dom = $match[1] ?? [];
    }

    /**
     * Условно очищаем полученный контент от ненужного мусора
     * Воспользуемся регулряными выражениями
     *
     * @param string $code
     *
     * @return string
     */
    protected function clearCode(string $code): string
    {
        // Удаляем комментарии
        $code = preg_replace('~<!--.*-->~isuU', '', $code);
        // Удаляем стили
        $code = preg_replace('~<style.*<\/style>~isuU', '', $code);
        // Удаляем script
        $code = preg_replace('~<script.*<\/script>~isuU', '', $code);
        return $code;
    }
}